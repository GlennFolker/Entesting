plugins{
    // Apply the entity generation plugin.
    id 'com.github.GlennFolker.EntityAnno' version "$entVersion"
}

sourceSets.main{
    // Main source directory.
    java.srcDirs = ['src/']
    // Main assets directory - mod resource files (sprites, sounds, music) go here.
    resources.srcDirs = ['assets/']
}

dependencies{
    // Downgrade Java 9+ syntax into being available in Java 8.
    annotationProcessor "com.github.GlennFolker.EntityAnno:downgrader:$entVersion"

    // Use the entity generation annotation processor.
    compileOnly "com.github.GlennFolker.EntityAnno:entity:$entVersion"
    kapt "com.github.GlennFolker.EntityAnno:entity:$entVersion"

    // Depend on Mindustry/Arc classpaths.
    compileOnly "com.github.Anuken.Mindustry:core:$mindustryVersion"
    compileOnly "com.github.Anuken.Arc:arc-core:$arcVersion"
}

repositories{
    // Necessary Maven repositories to pull the dependencies.
    mavenCentral()
    maven{url 'https://www.jitpack.io'}
    maven{ url "https://raw.githubusercontent.com/Zelaux/MindustryRepo/master/repository" }
    mavenLocal()
}

entityAnno{
    // Mod internal name, corresponds to the "name" field in `mod.json`.
    modName = 'ent-testing'
    // [Optional] Mindustry version entity component source version override. Defaults to what EntityAnno uses as classpath.
    mindustryVersion = project['mindustryVersion']
    // Directory to store entity IO revisions.
    revisionDir = file("$rootDir/revisions/")
    // Package name for fetched vanilla entity components.
    fetchPackage = 'entesting.fetched'
    // Modded entity component source files package; these will be excluded from the JAR.
    genSrcPackage = 'entesting.entities.comp'
    // Root generated entity classes package.
    genPackage = 'entesting.gen.entities'
}

// Use Java 17 syntax, but target Java 8 bytecode version.
tasks.withType(JavaCompile).configureEach{
    sourceCompatibility = 17
    options.release = 8

    options.incremental = true
    options.encoding = 'UTF-8'
}

jar{
    archiveFileName = 'EntestingDesktop.jar'

    from files(sourceSets.main.output.classesDirs)
    from files(sourceSets.main.output.resourcesDir)
    from configurations.runtimeClasspath.collect{it.isDirectory() ? it : zipTree(it)}
}

task dex(type: Jar, dependsOn: jar){
    archiveFileName = "Entesting.jar"

    final def desktopJar = jar.archiveFile.get().asFile
    final def dexJar = file("$dex.temporaryDir/Dexed.jar")
    doFirst{
        def command = "d8 --min-api $sdkAPI --output $dexJar $desktopJar"

        (configurations.compileClasspath.asList() + configurations.runtimeClasspath.asList()).forEach{
            if(it.exists()) command += " --classpath $it.path"
        }

        def sdkRoot = System.getenv('ANDROID_SDK_ROOT') ?: System.getenv('ANDROID_HOME')
        command += " --lib ${file("$sdkRoot/platforms/android-$sdkVersion/android.jar")}"

        if(System.getProperty('os.name').contains('Windows')) command = "cmd /c $command"
        command.execute(null, file("$buildDir/libs")).waitForProcessOutput(System.out, System.err)
    }

    from zipTree(desktopJar)
    from zipTree(dexJar)
}
